#!/usr/bin/env tclsh

################################################################################
# VARIABLES
#
namespace eval tCalc {
  variable version   {1.2.2}
  variable safe      [interp create -safe]
  variable ontop     {false}
  variable resizable 0
  variable entry     {}
  variable history   [list]
  variable precision 3
  variable error     {___tCalcError___}
}

# define new mathematic functions
namespace eval tcl::mathfunc {
  proc precision {number precision} {
    expr {double(round(10 ** $precision * $number)) / 10 ** $precision}
  }
  # speed of light
  proc c   {} {return 299792458}
  # Euler's number (2.71828)
  proc e   {} {expr {exp(1)}}
  # π (3.1415)
  proc pi  {} {expr {acos(-1)}}
  # φ (golden ratio)
  proc phi {} {expr {(1 + sqrt(5)) / 2}}
  # trigonometric functions (degrees)
  proc sind  {x} {expr {sin($x * pi() / 180)}}
  proc cosd  {x} {expr {cos($x * pi() / 180)}}
  proc tand  {x} {expr {tan($x * pi() / 180)}}
  proc asind {x} {expr {asin($x) * 180 / pi()}}
  proc acosd {x} {expr {acos($x) * 180 / pi()}}
  proc atand {x} {expr {atan($x) * 180 / pi()}}
  # 1/x
  proc inv {x} {expr {1 / double($x)}}
  # arithmetic mean
  proc avg {args} {am {*}$args}
  proc am {args} {expr {[tcl::mathop::+ {*}$args] * inv([llength $args])}}
  # geometric mean
  proc gm {args} {expr {abs([tcl::mathop::* {*}$args])**inv([llength $args])}}
  # harmonic mean
  proc hm {args} {expr {[llength $args] * inv([tcl::mathop::+ {*}[lmap i $args {expr {inv($i)}}]])}}
  # quadratic mean
  proc rms {args} {qm {*}$args}
  proc qm {args} {expr {sqrt(inv([llength $args]) * [tcl::mathop::+ {*}[lmap i $args {expr {$i**2}}]])}}
  # quadratic formula
  proc quadf {a b c} {
    try {
      set d [expr {sqrt(($b**2) - (4 * $a * $c))}]
    } on error msg {
      puts stderr "no roots in R"
      set result $tCalc::error
    } on ok msg {
      set x1 [expr {precision((- $b + $d) * inv(2 * $a),$tCalc::precision)}]
      set x2 [expr {precision((- $b - $d) * inv(2 * $a),$tCalc::precision)}]
      set result "${x1}\t${x2}"
    }
    return $result
  }
  # factorial (x!)
  proc factorial {x} {
    if {$x < 0} {
      puts stderr "domain error: argument not in valid range"
      set result $tCalc::error
    } else {
      set i 1; set result 1
      while {$i <= $x} {
        set result [expr {$i * $result}]
        incr i
      }
    }
    return $result
  }
  # interest
  proc interest  {capital interest period} {expr {$capital * (1 + ($interest * $period))}}
  # compound interest
  proc cinterest {capital interest period} {expr {$capital * ((1 + $interest) ** $period)}}
  # difference between two days (format: ddmmyyyy)
  proc days {x y} {
    set x [clock scan $x -format {%d%m%Y}]
    set y [clock scan $y -format {%d%m%Y}]
    expr {round(($y - $x) * inv(60*60*24))}
  }
  # difference between two hours (24h format: hhmm)
  proc hours {x y} {
    set x [clock scan $x -format {%H%M}]
    set y [clock scan $y -format {%H%M}]
    set hours [expr {$y - $x}]
    if {$hours < 0} {
      set hours [expr {[clock add $y 1 day] - $x}]
    }
    if {$hours < 0} {
      set hours [expr {abs($y - $x)}]
    }
    expr {$hours * inv(60*60)}
  }
  # celcius/fahrenheit
  proc f2c {x} {expr {($x - 32) / 1.8}}
  proc c2f {x} {expr {($x * 1.8) + 32}}
  # miles/kilometers
  proc mi2km {x} {expr {$x * 1.609344}}
  proc km2mi {x} {expr {$x / 1.609344}}
  # btu/watt
  proc btu2watt {x} {expr {$x * 0.29307107}}
  proc watt2btu {x} {expr {$x / 0.29307107}}

  # teach safe interpreter the new functions
  foreach function [info procs [namespace current]::*] {
    $tCalc::safe alias $function $function
  }
  # ln() is log(), log() is log10()
  $tCalc::safe alias [namespace current]::ln  [namespace current]::log
  $tCalc::safe alias [namespace current]::log [namespace current]::log10
}

# helper function to evaluate with safe interpreter
# and manage errors and rounding
proc tCalc::Evaluate {expression} {
  try {
    $tCalc::safe eval [list expr [string map {/ *1.0/} $expression]]
  } on error msg {
    puts stderr [lindex [split $msg "\n"] 0]
    set result $tCalc::error
  } on ok result {
    # round to user defined decimal points
    set result [expr {precision($result,$tCalc::precision)}]
    # avoid printing extra decimal zeros
    set result0 [expr {round($result)}]
    if {$result0 == $result} {
      set result $result0
    }
  } finally {
    return $result
  }
}

################################################################################
# COMMAND LINE
#
# if there are command line arguments, print result and exit
if {$::argc > 0} {
  # fixes errors with spaces in command line
  set result [tCalc::Evaluate [join $::argv]]
  if {$result eq $tCalc::error} {
    exit 255
  } else {
    puts stdout $result
    exit 0
  }
}
# else, start GUI
package require Tk

################################################################################
# PROCEDURES
#
proc tCalc::History {entry} {
  set index [lsearch -exact $tCalc::history $tCalc::entry]
  if {($index - 1) < 0} {
    set index "end"
  } else {
    incr index -1
  }
  set tCalc::entry [lindex $tCalc::history $index]
  $entry xview end
  $entry icursor end
}

proc tCalc::Clear {entry} {
  set tCalc::entry ""
  $entry configure -style valid.TCombobox
}

proc tCalc::Result {entry} {
  if {$tCalc::entry ni $tCalc::history} {
    lappend tCalc::history $tCalc::entry
  }
  set result [tCalc::Evaluate $tCalc::entry]
  if {$result eq $tCalc::error} {
    $entry configure -style error.TCombobox
  } else {
    set tCalc::entry $result
    $entry configure -style valid.TCombobox
  }
  $entry xview end
  $entry icursor end
}

proc tCalc::Button {entry key} {
  $entry insert insert $key
}

proc tCalc::About {version} {
  tk_messageBox -title "About tCalc" -icon info -type ok -parent . \
    -message "tCalc $version" -detail \
{A simple calculator,
written in core Tcl/Tk.

MIT License

Copyright © Thanos Zygouris
<athanasios.zygouris@gmail.com>}
}

################################################################################
# MAIN MENU
#
proc tCalc::Menu {} {
  option add *tearOff false
  menu .menu
    .menu add command -label "About tCalc..." -underline 0 \
      -accelerator "F1" -command {tCalc::About $tCalc::version}
    .menu add separator
    .menu add checkbutton -label "On Top" -underline 3 \
      -accelerator "F2" \
      -variable tCalc::ontop -onvalue "true" -offvalue "false" \
      -command {wm attributes . -topmost $tCalc::ontop}
    .menu add checkbutton -label "Resizable" -underline 4 \
      -variable tCalc::resizable -onvalue 1 -offvalue 0 \
      -command {wm resizable . $tCalc::resizable 0}
    .menu add separator
    .menu add command -label "Cut" \
      -underline 2 -accelerator "Ctrl+X" \
      -command {event generate .entry <<Cut>>}
    .menu add command -label "Copy" \
      -underline 0 -accelerator "Ctrl+C" \
      -command {event generate .entry <<Copy>>}
    .menu add command -label "Paste" \
      -underline 0 -accelerator "Ctrl+V" \
      -command {event generate .entry <<Paste>>}
    .menu add separator
    .menu add cascade -label "Precision" -underline 1 \
      -menu [menu .menu.precision]
      for {set i 0} {$i <= 15} {incr i} {
        .menu.precision add radiobutton -label $i \
          -variable tCalc::precision -value $i
      }
    .menu add separator
    .menu add command -label "Exit" \
      -underline 1 -accelerator "Ctrl+Q" \
      -command {exit}
}

################################################################################
# WIDGETS
#
proc tCalc::Widgets {} {
  ttk::style configure valid.TCombobox -fieldbackground white
  ttk::style configure error.TCombobox -fieldbackground red

  ttk::combobox .entry -justify right -style valid.TCombobox \
    -textvariable tCalc::entry -values $tCalc::history \
    -postcommand {.entry configure -values $tCalc::history}
  grid .entry -columnspan 5 -sticky we -padx 1 -pady 1
  grid columnconfigure . .entry -weight 1

  set layout {
    {7 8 9 ( )}
    {4 5 6 * /}
    {1 2 3 + -}
    {C 0 . =}
  }
  set i 0
  set buttons [list]
  foreach row $layout {
    foreach key $row {
      switch -- $key {
        =       {set command [list tCalc::Result .entry]}
        C       {set command [list tCalc::Clear  .entry]}
        default {set command [list tCalc::Button .entry $key]}
      }
      lappend buttons [tk::button ".[incr i]" -text $key -takefocus 0 \
        -command $command]
    }
    grid {*}$buttons -sticky we -padx 1 -pady 1
  }
  grid .$i -columnspan 2
}

################################################################################
# BINDINGS
#
proc tCalc::Bindings {} {
  bind all <3>         {tk_popup .menu %X %Y}
  bind all <F1>        {.menu invoke "About tCalc..."}
  bind all <F2>        {.menu invoke "On Top"}
  bind all <KP_Enter>  {event generate %W <Return>}

  bind .entry <Up>        {tCalc::History %W}
  bind .entry <Return>    {tCalc::Result %W}
  bind .entry <Escape>    {tCalc::Clear %W}
  bind .entry <Control-q> {exit}
  bind .entry <Control-a> {event generate %W <Tab>}
  bind .entry <<ComboboxSelected>> {%W selection clear}
}

################################################################################
# MAIN PROGRAM
#
tCalc::Menu
tCalc::Widgets
tCalc::Bindings
focus .entry

wm title     . "tCalc"
wm minsize   . 100 100
wm resizable . $tCalc::resizable 0
wm protocol  . WM_DELETE_WINDOW {exit}
