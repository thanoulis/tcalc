#!/usr/bin/env tclsh

set ::tcl_precision 7

################################################################################
# VARIABLES
#
namespace eval tCalc {
  variable safe      [interp create -safe]
  variable ontop     {false}
  variable resizable 0
  variable entry     {}
  variable hlist     [list]
  variable hindex    0
}

# helper function to evaluate with safe interpreter
proc tCalc::Evaluate {args} {
  set expression "expr [string map {/ *1.0/} $args]"
  if {[catch {set result [$tCalc::safe eval $expression]} msg]} {
    return [lindex [split $msg "\n"] 0]
  } else {
    return $result
  }
}

################################################################################
# COMMAND LINE
#
# if there are command line arguments, show result in terminal and exit
if {$::argc > 0} {
  puts [set result [tCalc::Evaluate $::argv]]
  if {[string is double $result]} {
    exit 0
  } else {
    exit 255
  }
}
# else, start GUI
package require Tk

################################################################################
# PROCEDURES
#
proc tCalc::Help {} {
  tk_messageBox -title "About tCalc" -icon info -type ok -parent . \
    -message "tCalc 0.2.2" -detail \
{A simple calculator,
written in core Tcl/Tk.

MIT License

Copyright Â© Thanos Zygouris
<athanasios.zygouris@gmail.com>}
}

proc tCalc::History {entry} {
  incr tCalc::hindex -1
  if {$tCalc::hindex < 0} {
    set tCalc::hindex [expr {[llength $tCalc::hlist] -1}]
  }
  set tCalc::entry [lindex $tCalc::hlist $tCalc::hindex]
  $entry xview end
  $entry icursor end
}

proc tCalc::Clear {entry} {
  set tCalc::entry ""
  $entry configure -style valid.TCombobox
}

proc tCalc::Result {entry} {
  if {$tCalc::entry ni $tCalc::hlist} {
    lappend tCalc::hlist $tCalc::entry
  }
  set tCalc::hindex [llength $tCalc::hlist]
  set tCalc::entry [tCalc::Evaluate $tCalc::entry]
  if {[string is double $tCalc::entry]} {
    $entry configure -style valid.TCombobox
  } else {
    $entry configure -style error.TCombobox
  }
  $entry xview end
  $entry icursor end
}

proc tCalc::Button {entry key} {
  $entry insert insert $key
}

################################################################################
# MAIN MENU
#
proc tCalc::Menu {} {
  option add *tearOff false
  menu .menu
    .menu add command -label "Help..." -underline 0 \
      -accelerator "F1" -command {tCalc::Help}
    .menu add separator
    .menu add checkbutton -label "On Top" -underline 3 \
      -accelerator "F2" \
      -variable tCalc::ontop -onvalue "true" -offvalue "false" \
      -command {wm attributes . -topmost $tCalc::ontop}
    .menu add checkbutton -label "Resizable" -underline 4 \
      -variable tCalc::resizable -onvalue 1 -offvalue 0 \
      -command {wm resizable . $tCalc::resizable 0}
    .menu add separator
    .menu add command -label "Cut" \
      -underline 2 -accelerator "Ctrl+X" \
      -command {event generate .entry <<Cut>>}
    .menu add command -label "Copy" \
      -underline 0 -accelerator "Ctrl+C" \
      -command {event generate .entry <<Copy>>}
    .menu add command -label "Paste" \
      -underline 0 -accelerator "Ctrl+V" \
      -command {event generate .entry <<Paste>>}
    .menu add separator
    .menu add cascade -label "Precision" -underline 1 \
      -menu [menu .menu.precision]
      for {set i 0} {$i <= 9} {incr i} {
        .menu.precision add radiobutton -label $i -underline 0 \
          -variable ::tcl_precision -value $i
      }
    .menu add separator
    .menu add command -label "Exit" \
      -underline 1 -accelerator "Ctrl+Q" \
      -command {exit}
}

################################################################################
# WIDGETS
#
proc tCalc::Widgets {} {
  ttk::style configure valid.TCombobox -fieldbackground white
  ttk::style configure error.TCombobox -fieldbackground red

  ttk::combobox .entry -justify right -style valid.TCombobox \
    -textvariable tCalc::entry -values $tCalc::hlist \
    -postcommand {.entry configure -values $tCalc::hlist}
  grid .entry -columnspan 5 -sticky we -padx 1 -pady 1
  grid columnconfigure . .entry -weight 1

  set calc_buttons {
    {7 8 9 ( )}
    {4 5 6 * /}
    {1 2 3 + -}
    {C 0 . =}
  }
  set i 0
  set buttons [list]
  foreach row $calc_buttons {
    foreach key $row {
      switch -- $key {
        =       {set command [list tCalc::Result .entry]}
        C       {set command [list tCalc::Clear .entry]}
        default {set command [list tCalc::Button .entry $key]}
      }
      lappend buttons [tk::button ".[incr i]" -text $key -takefocus 0 \
        -command $command]
    }
    grid {*}$buttons -sticky we -padx 1 -pady 1
  }
  grid .$i -columnspan 2
}

################################################################################
# BINDINGS
#
proc tCalc::Bindings {} {
  bind all <3>         {tk_popup .menu %X %Y}
  bind all <F1>        {.menu invoke "Help..."}
  bind all <F2>        {.menu invoke "On Top"}
  bind all <KP_Enter>  {event generate %W <Return>}

  bind .entry <Up>        {tCalc::History %W}
  bind .entry <Return>    {tCalc::Result %W}
  bind .entry <Escape>    {tCalc::Clear %W}
  bind .entry <Control-q> {exit}
  bind .entry <Control-a> {event generate %W <Tab>}
  bind .entry <<ComboboxSelected>> {%W selection clear}
}

################################################################################
# MAIN PROGRAM
#
tCalc::Menu
tCalc::Widgets
tCalc::Bindings
focus .entry

wm title     . "tCalc"
wm minsize   . 100 100
wm resizable . $tCalc::resizable 0
wm protocol  . WM_DELETE_WINDOW {exit}
